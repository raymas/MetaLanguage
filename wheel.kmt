@uri "http://wheel/1.0"
package wheel;

require "kermeta"
require "http://www.eclipse.org/emf/2002/Ecore"
class WheelSM
{
	reference initialState : State
	reference finalState : State
	attribute ownedState : State[0..*]#owningFSM

	operation generation() is do
		stdio.writeln("state = 0")
		stdio.writeln("isFinished_b = False")

		stdio.writeln("while not isFinished_b:")
		stdio.writeln("\tbw.ready()")

		stdio.writeln("")

		ownedState.each{s|
			s.generation()
		}

	end

}
class State
{
	attribute name : ecore::EString
	reference incomingTransition : Transition
	attribute outgoingTransition : Transition#Source
	reference owningFSM : WheelSM[1..1]#ownedState

	operation generation() is do
		stdio.writeln("\tif state == " + name + ":")
		if not (outgoingTransition.isVoid) then
			outgoingTransition.generation()
		end
	end

}
class Transition
{
	attribute speed : ecore::EString
	attribute time : ecore::EString
	reference target : State
	reference Source : State[1..1]#outgoingTransition
	
	operation generation() is do

        var side : ecore::EString init ""

        if speed.contains("-") then
			speed := speed.replace("-", "")

			side := ".backward()"
        else
			side := ".forward()"
        end

        stdio.writeln("\t\tbw.speed = " + speed)

        stdio.writeln("")

        stdio.writeln("\t\tbw" + side)

        stdio.writeln("\t\ttime.sleep(" + time + ")")

        // dangerous but you know...
        if not (target.isVoid) then
			stdio.writeln("\t\tstate = " + target.name)
		else
			stdio.writeln("\t\tbw.stop()")
			stdio.writeln("")
			stdio.writeln("\t\tisFinished_b = true")
        end
	end
}
